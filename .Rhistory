geom_point(mapping = aes(x = unified_IEs_pred,
y = logRF,
text = InChI)) +
facet_wrap(~ Lab, scales = "free")
varImp(model)
SIRIUS_descriptors <- MS2Quant::Fingerprint_calc(data_SMILES)
sirius_true_FP_neg <- read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/toxicity/old_from_pilleriin/csi_fingerid_neg.tsv",
delim = "\t")
col_names_calcSirius_neg <- as.vector(paste("Un", sirius_true_FP_neg$absoluteIndex, sep = ""))
col_names_calcSmiles <- colnames(SIRIUS_descriptors)
intersection <- intersect(col_names_calcSirius_neg, col_names_calcSmiles)
intersection <- append("SMILES", intersection)
sirius_true_FP_neg <- read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/toxicity/old_from_pilleriin/csi_fingerid_neg.tsv",
delim = "\t")
col_names_calcSirius_neg <- as.vector(paste("Un", sirius_true_FP_neg$absoluteIndex, sep = ""))
col_names_calcSmiles <- colnames(SIRIUS_descriptors)
intersection <- intersect(col_names_calcSirius_neg, col_names_calcSmiles)
intersection <- append("SMILES", intersection)
SIRIUS_descriptors <- SIRIUS_descriptors[names(SIRIUS_descriptors)[names(SIRIUS_descriptors) %in% intersection] ]
# ---- Cleaning descriptors ----
descr <- SIRIUS_descriptors
descr <- cleaning_descriptors(descr)
data_clean <- data_training %>%
select(logIE, inchi, split, canonical_SMILES, viscosity, surface_tension, polarity_index, pH_aq, name, Lab) %>% #### NH4!!!!!!
rename(SMILES = canonical_SMILES) %>%
left_join(descr) %>%
unique() %>%
na.exclude()
training_set = data_clean %>%
filter(split) %>%
select(-split)
test_set = data_clean %>%
filter(!split) %>%
select(-split)
# ---- Cross-validation/hyperparameter tuning ----
set.seed(123)
folds = 5
fitControlMethod = "boot"
method = "xgbTree"
folds = groupKFold(training_set$inchi, k = folds)
fitControl <- trainControl(method = fitControlMethod, index = folds)
# ---- Building model ----
set.seed(123)
model <- train(logIE ~ .,
data = training_set %>% select(-inchi, -SMILES, -name, -Lab),
method = method,
trControl = fitControl)
# Predict values for training set, rmse of training set
training_set = training_set %>%
mutate(unified_IEs_pred = predict(model, newdata = training_set))
rmse_training <- rmse(training_set$logIE, training_set$unified_IEs_pred)
# Predict values for test set, rmse of test set
test_set <- test_set %>%
mutate(unified_IEs_pred = predict(model, newdata = test_set))
rmse_test <- rmse(test_set$logIE, test_set$unified_IEs_pred)
rmse_training
rmse_test
data_forPlotting <- training_set %>%
mutate(set = "training") %>%
bind_rows(test_set %>%
mutate(set = "test")) %>%
mutate(set = factor(set,
ordered = TRUE,
levels = c( "training", "test")))
plot = ggplot(data = data_forPlotting) + # %>%
# group_by(name, Lab) %>%
# summarize(unified_IEs = mean(unified_IEs),
#           unified_IEs_pred = mean(unified_IEs_pred))%>%
# ungroup()) +
geom_point(
mapping = aes(x = logIE,
y = unified_IEs_pred,
#group = Lab,
color = set,
text = name),
size = 2.5,
alpha = 0.5) +
scale_color_manual(values=c("#515251", "#7CB368"))+
# geom_point(data = data_forPlotting %>%
#              filter(set == "test"),
#            mapping = aes(x = unified_IEs,
#                          y = unified_IEs_pred,
#                          #group = Lab,
#                          #color = Lab,
#                          color = "#7CB368",
#                          text = name)) +
geom_abline(intercept = 0, slope = 1) +
geom_abline(intercept = 1, slope = 1) +
geom_abline(intercept = -1, slope = 1) +
theme(aspect.ratio = 1) +
#xlim(c(-2.5, 6.5)) +
#ylim(c(-2.5, 6.5)) +
#annotation_logticks() +
#theme_plot +
xlab(substitute(paste("log", italic("IE"))["unified"]))  +
ylab(substitute(paste("log", italic("IE"))["predicted"]))
plot
data_all <- list("model" = model,
"plot" = plot,
"data" = data_clean,
"data_forPlotting" = data_forPlotting,
"rmse_training" = rmse_training,
"rmse_test" = rmse_test,
"date" = Sys.Date())
data_all <- list("model" = model,
"plot" = plot,
"data" = data_clean,
"data_forPlotting" = data_forPlotting,
"rmse_training" = rmse_training,
"rmse_test" = rmse_test,
"date" = Sys.Date())
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/computational/IE mudeli script ja failid/students/Helen/models")
saveRDS(data_all, file="neg_model_sirius_xgbTree_allNegFPonly.RData")
rmse_training
rmse_test
######### CALIBRANTS ##############################################
# Louise's calibration compounds
Louise_cal <- read_excel("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/IE_modelling/NORMAN/NORMAN_MMK-orbitrap_modified.xlsx",
sheet = "Calibration compounds",
col_names = TRUE,
skip = 1)
# Take out isotope labelled compounds, rename "SMILES" column
Louise_cal <- Louise_cal %>%
filter(!`Compound name` %in% c("Caffeine-13C3", "Atrazine-d5", "Haloperidol-d4")) %>%
rename(SMILES = `Standardised canonical SMILES`,
RT = `Retention time (min)`,
compound = `Compound name`) %>%
mutate(logRF = log10(`Response factor`)) %>%
drop_na(RT)
View(Louise_cal)
########## Function inputs ###########################################
calibrants_SMILES_data <- Louise_cal
View(calibrants_SMILES_data)
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...17`))
cor(log10(Louise_cal$`Concentration Cal 3 (M)`), log10(Louise_cal$`Signal Cal 3...17`))^2
cor(log10(Louise_cal$`Concentration Cal 3 (M)`), log10(Louise_cal$`Signal Cal 3...17`))
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`))
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_classic()
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_bw()
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_dark()
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_minimal()
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_classic()
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_classic() + xlab("Concentration") + ylab("Signal area")
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_classic() + xlab("Concentration") + ylab("Integrated signal area")
max(Louise_cal$`Concentration Cal 3 (M)`)/min(Louise_cal$`Concentration Cal 3 (M)`)
max(Louise_cal$`Signal Cal 3...17`)/min(Louise_cal$`Signal Cal 3...17`)
max(Louise_cal$`Signal Cal 3...17` %>% drop_na())/min(Louise_cal$`Signal Cal 3...17` %>% drop_na())
test = Louise_cal %>% select(`Concentration Cal 3 (M)`, `Signal Cal 3...17`)
test= test %>%  drop_na()
max(Louise_cal$`Signal Cal 3...17`)/min(Louise_cal$`Signal Cal 3...17`)
max(test$`Signal Cal 3...17`)/min(test$`Signal Cal 3...17`)
suspects_concentrations <- read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/IE_modelling/NORMAN/validation_set_predicted_concentrations/MS2Quant_from_MS2.csv")
######## adding true concentrations #####################
sus_concentrations <- read_csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/IE_modelling/NORMAN/conc_summary_LM_orbitrap.csv")
sus_concentrations <- sus_concentrations %>%
filter(sample == "S3a" | sample == "S3b") %>%
select(compound, c_real, sample)
suspects_concentrations_comparison <- suspects_concentrations %>%
mutate(compound = tolower(compound)) %>%
left_join(sus_concentrations %>%
mutate(compound = tolower(compound))) %>%
select(colnames(sus_concentrations), everything()) %>%
filter(!PeakID %in% c(14600, 11820))
View(suspects_concentrations_comparison)
test_2 = suspects_concentrations_comparison %>%  filter(sample == "S3a")
ggplot(data = test_2) + geom_point(mapping = aes(x=c_real, y = area)) + theme_classic() + xlab("Concentration") + ylab("Integrated signal area")
max(test_2$area)/min(test_2$area)
max(test_2$c_real)/min(test_2$c_real)
ggplot(data = test_2) + geom_point(mapping = aes(x=c_real, y = area)) + theme_classic() + xlab("Concentration") + ylab("Integrated signal area") + geom_point(mapping = aes(x=concentration_predicted, y = area))
ggplot(data = test_2) + geom_point(mapping = aes(x=c_real, y = area)) + theme_classic() + xlab("Concentration") + ylab("Integrated signal area") + geom_point(mapping = aes(x=concentration_predicted, y = area, color = "RED"))
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=`Concentration Cal 3 (M)`, y = `Signal Cal 3...23`)) + theme_classic() + xlab("Concentration") + ylab("Integrated signal area")
ggplot(data = Louise_cal) + geom_point(mapping = aes(x=log10(`Concentration Cal 3 (M)`), y = log10(`Signal Cal 3...23`))) + theme_classic() + xlab("Concentration") + ylab("Integrated signal area")
?nearZeroVar
?trainControl
summary_table_CF2CF2 = read_delim("results/homologue_vs_IEmodel_results/230703_summary_table_CF2CF2_concentrations.csv")
admin = "C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant"
setwd(admin)
summary_table_CF2CF2 = read_delim("results/homologue_vs_IEmodel_results/230703_summary_table_CF2CF2_concentrations.csv")
IE_c_plot = ggplot(data = summary_table_CF2CF2)+
geom_point(mapping = aes(x = Theoretical_conc_uM,
y = conc_pred_uM,
color = Compound)) +
scale_y_log10(limits = c(10^-5, 10^0)) +
scale_x_log10(limits = c(10^-5, 10^0)) +
geom_abline(slope = 1, intercept = 0) +
geom_abline(slope = 1, intercept = 1) +
geom_abline(slope = 1, intercept = -1) +
theme(aspect.ratio = 1)
homolog_c_plot = ggplot(data = summary_table_CF2CF2)+
geom_point(mapping = aes(x = Theoretical_conc_uM,
y = conc_homolog_uM,
color = Compound,
text = Compound_homolog)) +
scale_y_log10(limits = c(10^-5, 10^0)) +
scale_x_log10(limits = c(10^-5, 10^0)) +
geom_abline(slope = 1, intercept = 0) +
geom_abline(slope = 1, intercept = 1) +
geom_abline(slope = 1, intercept = -1) +
geom_abline(slope = 1, intercept = 1) +
theme(aspect.ratio = 1)#,
#legend.position = "none")
ggplotly(homolog_c_plot)
IE_c_plot = ggplot(data = summary_table_CF2CF2)+
geom_point(mapping = aes(x = Theoretical_conc_uM,
y = conc_pred_uM,
color = Compound)) +
scale_y_log10(limits = c(10^-5, 10^0)) +
scale_x_log10(limits = c(10^-5, 10^0)) +
geom_abline(slope = 1, intercept = 0) +
geom_abline(slope = 1, intercept = 1) +
geom_abline(slope = 1, intercept = -1) +
theme(aspect.ratio = 1)
homolog_c_plot = ggplot(data = summary_table_CF2CF2)+
geom_point(mapping = aes(x = Theoretical_conc_uM,
y = conc_homolog_uM,
color = Compound,
text = Compound_homolog)) +
scale_y_log10(limits = c(10^-5, 10^0)) +
scale_x_log10(limits = c(10^-5, 10^0)) +
geom_abline(slope = 1, intercept = 0) +
geom_abline(slope = 1, intercept = 1) +
geom_abline(slope = 1, intercept = -1) +
geom_abline(slope = 1, intercept = 1) +
theme(aspect.ratio = 1)#,
#legend.position = "none")
IE_c_plot
library(plotly)
#legend.position = "none")
ggplotly(homolog_c_plot)
which(apply(SMILES_all, 2, var) != 0)]
which(apply(SMILES_all, 2, var) != 0)
?apply
?Rtsne
??Rtsne
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant")
source("code/functions.R")
library(caTools)
library(tidyverse)
library(caret)
library(plotly)
library(cowplot)
#------------------------------------------------------------------
# Building model for IE pred in neg mode (joining Liigand's data)
#------------------------------------------------------------------
## ---- Reading in LC-MS data of calibration solutions ----
Orbitrap_dataset_raw = read_excel_allsheets(filename = "data_for_modelling/Batch 1 Semi Quant w frag.xlsx")
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
group_by(Compound) %>%
mutate(Theoretical_amt = case_when(
Filename == "2020071205-cal21" ~ mean(Theoretical_amt[Filename=="2020071205-cal22"]),
TRUE ~ Theoretical_amt))%>%
ungroup() %>%
filter(Theoretical_amt != "NaN")
## ---- Reading in SMILES for calibration compounds, removing NAs and adducts, mono PAPs, HFPO-DA ----
SMILES_data = read_SMILES(filename = "data_for_modelling/Smiles_for_Target_PFAS_semicolon.csv",
compounds_to_be_removed_as_list = c("HFPO-DA", "MeFOSE", "EtFOSE", "10:2 mono PAP", "4:2 mono PAP", "6:2 mono PAP", "8:2 mono PAP"))
## ---- Joining all collected data to one tibble, removing missing values, calculating slopes ----
data = Orbitrap_dataset_raw %>%
left_join(SMILES_data) %>%
drop_na(SMILES) %>%
mutate(RT = as.numeric(RT),
area_IC = Area*IC,
Theoretical_conc_uM = Theoretical_amt/Molecular_weight) %>%
group_by(SMILES, Compound) %>%
summarize(slope = linear_regression(area_IC, Theoretical_conc_uM, remove_lowest_conc = TRUE)$slope,
RT = mean(RT)) %>%
ungroup()
data = add_mobile_phase_composition(data = data,
eluent_file_name = "data_for_modelling/eluent.csv")
## ---- Converting slopes to logIE with PFOS as anchor ----
training = anchoring(data_to_be_anchored = data,
data_containing_anchor = "data_for_modelling/IE_training_data/190714_negative_model_logIE_data.csv")
## ---- Calculating PaDEL descriptors to all compounds based on SMILES ----
data_all_binded = PaDEL_original(training)
#target SMILES
target_SMILES <- data_all_binded %>%
filter(data_type == "PFAS") %>%
rename(Compound = name) %>%
select(Compound, SMILES) %>%
mutate(type = "Targets") %>%
unique()
#suspect SMILES
suspects_SMILES = read_delim("results/Melanie_new_suspects/suspects_smiles_melanie_updated_semicolon2.csv")
suspects_SMILES = suspects_SMILES %>%
select(ID, SMILES) %>%
left_join(target_SMILES) %>%
filter(is.na(Compound)) %>%
select(-Compound) %>%
rename(Compound = ID) %>%
mutate(type = "Suspects")
#all old data smiles that were used for modelling
old_data <- data_all_binded %>%
filter(data_type == "non-PFAS") %>%
rename(Compound = name) %>%
select(Compound, SMILES) %>%
mutate(type = "Liigand et al.") %>%
unique()
SMILES_all = target_SMILES %>%
bind_rows(suspects_SMILES) %>%
bind_rows(old_data)
#calculate PaDEL descriptors
SMILES_all = PaDEL_original(SMILES_all)
#select only the PaDEL descr that are in the model (also removed eluent descriptors here)
SMILES_all = SMILES_all %>%
select(Compound, SMILES, type, descriptors)
# get the descriptor names form the model
logIE_pred_model_train_test = readRDS(file="models/230619_logIE_model_withPFAS_train_test.RData")
descriptors = colnames(data_clean)
descriptors = descriptors[! descriptors%in% c("logIE", "pH.aq.", "polarity_index", "viscosity", "NH4", "name", "data_type", "SMILES")]
#select only the PaDEL descr that are in the model (also removed eluent descriptors here)
SMILES_all = SMILES_all %>%
select(Compound, SMILES, type, descriptors)
#Remove zero variance columns as otherwise cannot scale the data and do PCA
SMILES_all= SMILES_all %>%
select(Compound, SMILES, type) %>%
bind_cols(SMILES_all[ , which(apply(SMILES_all, 2, var) != 0)])
#create the PCA vectors
chemicals_pca = prcomp(SMILES_all %>%
select(-c(Compound, SMILES, type)),
center = TRUE,
scale = TRUE)
summary(chemicals_pca)
loadings_pca = as_tibble(chemicals_pca$rotation)
scores_pca = as_tibble(predict(chemicals_pca))
scores_pca = scores_pca %>%
bind_cols(SMILES_all %>%
select(Compound, SMILES, type)) #add the column with clusters and fruit names
plot_pc1_pc2 = ggplot() +
geom_point(mapping = aes(x = PC1,
y = PC2,
color = type),
data = scores_pca,
size = 2,
alpha = 0.5) +
scale_color_manual(values=c("#274c77", "#ee6c4d","#8b8c89"))+
labs(x = "PC1 (21.6%)", y = "PC2 (8.1%)") +
my_theme +
theme(legend.position = "bottom")
plot_pc1_pc2
plot_pc1_pc2 = ggplot() +
geom_point(mapping = aes(x = PC1,
y = PC2,
color = type),
data = scores_pca,
size = 2,
alpha = 0.5) +
scale_color_manual(values=c("#274c77", "#ee6c4d","#8b8c89"))+
labs(x = "PC1 (21.6%)", y = "PC2 (8.1%)") +
my_theme +
theme(legend.position = "bottom")
plot_pc1_pc2 = ggplot() +
geom_point(mapping = aes(x = PC1,
y = PC2,
color = type),
data = scores_pca,
size = 2,
alpha = 0.5) +
scale_color_manual(values=c("#274c77", "#ee6c4d","#8b8c89"))+
labs(x = "PC1 (21.6%)", y = "PC2 (8.1%)") +
#my_theme +
theme(legend.position = "bottom")
plot_pc1_pc2
plot_pc1_pc3 = ggplot() +
geom_point(mapping = aes(x = PC1,
y = PC3,
color = type),
data = scores_pca,
size = 2,
alpha = 0.75) +
scale_color_manual(values=c("#274c77", "#ee6c4d","#8b8c89"))+
labs(x = "PC1 (21.6%)", y = "PC3 (6.9%)") +
my_theme +
theme(legend.position = "right")
# PC3 (11.8%)
plot_pc1_pc3
plot_pc1_pc3 = ggplot() +
geom_point(mapping = aes(x = PC1,
y = PC3,
color = type),
data = scores_pca,
size = 2,
alpha = 0.75) +
scale_color_manual(values=c("#274c77", "#ee6c4d","#8b8c89"))+
labs(x = "PC1 (21.6%)", y = "PC3 (6.9%)") +
# my_theme +
theme(legend.position = "right")
# PC3 (11.8%)
plot_pc1_pc3
joined_plot3 = plot_pc1_pc2 + plot_pc1_pc3
joined_plot3[[1]] = joined_plot3[[1]] + theme(legend.position = "none")
joined_plot3 = joined_plot3 + plot_annotation(tag_levels = "A")
joined_plot3
joined_plot3 = plot_pc1_pc2 + plot_pc1_pc3
joined_plot3 = plot_pc1_pc2 + plot_pc1_pc3
# PC3 (11.8%)
plot_pc1_pc3
data_for_tsne = SMILES_all %>%
unique()
data_matrix  = as.matrix(data_for_tsne %>% select(-c(SMILES, Compound, type)))
tsne_out <- Rtsne(data_matrix)
library(Rtsne)
tsne_out <- Rtsne(data_matrix)
# Conversion of matrix to dataframe
tsne_plot <- data.frame(x = tsne_out$Y[,1],
y = tsne_out$Y[,2]) %>%
bind_cols(type = data_for_tsne$type)
# Plotting the plot using ggplot() function
tsne_plot = ggplot2::ggplot(tsne_plot)+ geom_point(aes(x=x,y=y, color = type), alpha = 0.6, size = 2.5) +
scale_color_manual(values=c("#a3cef1","#274c77", "#ee6c4d" )) +
my_theme + theme(legend.position = "bottom")
# Plotting the plot using ggplot() function
tsne_plot = ggplot2::ggplot(tsne_plot)+ geom_point(aes(x=x,y=y, color = type), alpha = 0.6, size = 2.5) +
scale_color_manual(values=c("#a3cef1","#274c77", "#ee6c4d" )) +
#my_theme +
theme(legend.position = "bottom")
tsne_plot
data_matrix  = as.matrix(data_for_tsne %>% select(-c(SMILES, Compound, type)))
tsne_out <- Rtsne(data_matrix, pca = FALSE)
# Conversion of matrix to dataframe
tsne_plot <- data.frame(x = tsne_out$Y[,1],
y = tsne_out$Y[,2]) %>%
bind_cols(type = data_for_tsne$type)
# Plotting the plot using ggplot() function
tsne_plot = ggplot2::ggplot(tsne_plot)+ geom_point(aes(x=x,y=y, color = type), alpha = 0.6, size = 2.5) +
scale_color_manual(values=c("#a3cef1","#274c77", "#ee6c4d" )) +
#my_theme +
theme(legend.position = "bottom")
tsne_plot
devtools::create("kruvelab_all_functions")
devtools::create("kruvelabFns")
setwd("~/GitHub/kruvelab_functions")
devtools::create("kruvelabFns")
devtools::document()
devtools::document()
rcompendium::add_dependencies()
?rcompendium
??rcompendium
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
library(devtools)
library(tools)
# Path to your package
pkg_path <- "C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/kruvelab_functions"
# Build and install the package
build(pkg_path)
install(pkg_path)
# Generate .Rd files
document(pkg_path)
# Path to the directory containing .Rd files
doc_path <- file.path(pkg_path, "man")
# Path to save the PDF
pdf_path <- "/path/to/save/your/package_documentation.pdf"
# Generate PDF
Rd2pdf(outdir = doc_path, file = pdf_path)
?Rd2pdf
# Generate PDF
RdUtils::Rd2pdf(outdir = doc_path, file = pdf_path)
??Rd2pdf
# Generate PDF
tools::Rd2pdf(outdir = doc_path, file = pdf_path)
# Generate PDF
utils::Rd2pdf(outdir = doc_path, file = pdf_path)
?tools:Rd2pdf
?tools::Rd2pdf
??tools::Rd2pdf
??Rd2pdf
devtools::build()
??devtools::build()
?devtools::build()
# Build and install the package
build(pkg_path, manual = T)
# Build and install the package
build(pkg_path, manual = TRUE)
devtools::build(manual = TRUE)
check(manual = TRUE)
?kruvelabFns
?kruvelabFns
??kruvelabFns
?kruvelabFns::polarity_index()
devtools::load_all()
devtools::document()
devtools::install()
help(package="kruvelabFns")
help(package="kruvelabFns")
devtools::install_github("kruvelab/kruvelab_functions")
help(kruvelabFns)
help("kruvelabFns")
?kruvelabFns
??kruvelabFns
help(package = "kruvelabFns")
sessioninfo::package_info("kruvelabFns")
getwd()
devtools::build_manual("kruvelab_functions", path = ".")
devtools::build_manual("kruvelabFns", path = ".")
devtools::build_manual("~R/", path = ".")
devtools::build_manual("C:/Program Files/R/-4.3.2/library/utils", path = ".")
system("R CMD Rd2pdf kruvelab.Rd")
system("R CMD Rd2pdf kruvelab_functions.Rd")
system("R CMD Rd2pdf kruvelab_functions/polarity_index.Rd")
system("R CMD Rd2pdf polarity_index.Rd")
getwd()
setwd("~/GitHub/kruvelab_functions/man")
system("R CMD Rd2pdf polarity_index.Rd")
setwd("~/GitHub/kruvelab_functions")
help("kruvelabFns")
help(package = "kruvelabFns")
help(package = "kruvelabFns", help_type = "pdf")
View(tsne_out)
