n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
#population-------
per_cent_faulty = 10
n_all = 10000
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
#------ n = 10-----
n_sample = 10
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 20-----
n_sample = 20
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 100-----
n_sample = 100
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
scale_x_log10()
dataset = dataset %>%
mutate(log_pfas = log10(pfas_ng_g))
#write your code here
mean_log_pfas = mean(dataset$log_pfas)
sd_log_pfas = sd(dataset$log_pfas)
dataset_field_study = tibble(n = 2:100,
lower_confidence_interval = mean_log_pfas + qt(p = 0.025, df = n-1)*sd_log_pfas/sqrt(n),
upper_confidence_interval = mean_log_pfas + qt(p = 0.975, df = n-1)*sd_log_pfas/sqrt(n),
width_conf_int = upper_confidence_interval - lower_confidence_interval)
View(dataset_field_study)
dataset_field_study = dataset_field_study %>%
mutate(cost = 20000 + n*350 + 50000 + 100*n)
ggplot(data = dataset_field_study,
mapping = aes(x = n)) +
geom_line(mapping = aes(y = width_conf_int)) +
geom_line(mapping = aes(y = cost/10000)) +
scale_y_continuous(
name = "First Axis",
sec.axis = sec_axis(~.*10000,
name = "cost")
)
ggplot(data = dataset_field_study,
mapping = aes(x = n)) +
geom_line(mapping = aes(y = width_conf_int)) +
geom_line(mapping = aes(y = cost/10000)) +
scale_y_continuous(
name = "Confidence interval (log-units)",
sec.axis = sec_axis(~.*10000,
name = "cost")
)
#library(janitor)
#library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
#population-n = 10000------
per_cent_faulty = 10
n_all = 10000
n_sample = 10
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#population-n = 100------
per_cent_faulty = 10
n_all = 100
n_sample = 10
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
knitr::opts_chunk$set(echo = TRUE)
#library(janitor)
#library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
dataset = read_excel("PFAS_blood_level_pre-study.xlsx"
)
?clean_names
??clean_names
knitr::opts_chunk$set(echo = TRUE)
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
library(janitor)
library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
geom_density()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
geom_density() +
scale_x_log10()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
geom_density()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
#geom_histogram() +
geom_density()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
#geom_histogram() +
geom_density() +
scale_x_log10()
library(rcdk)
patRoon::newProject()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(janitor)
library(rsm) #Allows us to create the design for our experiments and analyze influence of individual factors and interactions between factors
library(scales)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
library(visreg) #Allows to create contour and 3D plots
design <- bbd(k = 3, # number of factors to be investigated
n0 = 3, # number of center points
randomize = TRUE) # randomizing the design for running the experiments in randomized order
design <- as.tibble(design)  # re-forming the design into a data frame that can be used for calculations
# create the design ourselves??
design
design <- design %>%
rename("lemon_juice" = x1,
"sugar_syrup" = x2,
"water_tap" = x3) %>%
select(std.order, lemon_juice, sugar_syrup, water_tap)
design <- bbd(k = 3, # number of factors to be investigated
n0 = 3, # number of center points
randomize = F) # randomizing the design for running the experiments in randomized order
design <- as.tibble(design)  # re-forming the design into a data frame that can be used for calculations
design
# decoding the variables
# Defining maximum and minimum values of each factor here (we might need them again later)
max_lemon_juice_tbs = 8
min_lemon_juice_tbs = 0
max_sugar_syrup_tbs = 8
min_sugar_syrup_tbs = 0
max_water_tap_percentage = 100
min_water_tap_percentage = 0
# Creating a new column for each factor with decoded variables:
design <- design %>%
rowwise() %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(min_lemon_juice_tbs, max_lemon_juice_tbs), from = c(-1,1)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(min_sugar_syrup_tbs, max_sugar_syrup_tbs), from = c(-1,1)),
water_tap_percentage = rescale(water_tap, to = c(min_water_tap_percentage, max_water_tap_percentage), from = c(-1,1)))
design <- design %>%
rename("lemon_juice" = x1,
"sugar_syrup" = x2,
"water_tap" = x3) %>%
select(std.order, lemon_juice, sugar_syrup, water_tap)
# decoding the variables
# Defining maximum and minimum values of each factor here (we might need them again later)
max_lemon_juice_tbs = 8
min_lemon_juice_tbs = 0
max_sugar_syrup_tbs = 8
min_sugar_syrup_tbs = 0
max_water_tap_percentage = 100
min_water_tap_percentage = 0
# Creating a new column for each factor with decoded variables:
design <- design %>%
rowwise() %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(min_lemon_juice_tbs, max_lemon_juice_tbs), from = c(-1,1)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(min_sugar_syrup_tbs, max_sugar_syrup_tbs), from = c(-1,1)),
water_tap_percentage = rescale(water_tap, to = c(min_water_tap_percentage, max_water_tap_percentage), from = c(-1,1)))
View(design)
View(design)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(janitor)
library(rsm) #Allows us to create the design for our experiments and analyze influence of individual factors and interactions between factors
library(scales)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
library(visreg) #Allows to create contour and 3D plots
design <- bbd(k = 3, # number of factors to be investigated
n0 = 3, # number of center points
randomize = F) # randomizing the design for running the experiments in randomized order
design <- as.tibble(design)  # re-forming the design into a data frame that can be used for calculations
# create the design ourselves??
design
design <- design %>%
rename("lemon_juice" = x1,
"sugar_syrup" = x2,
"water_tap" = x3) %>%
select(std.order, lemon_juice, sugar_syrup, water_tap)
# decoding the variables
# Defining maximum and minimum values of each factor here (we might need them again later)
max_lemon_juice_tbs = 8
min_lemon_juice_tbs = 0
max_sugar_syrup_tbs = 8
min_sugar_syrup_tbs = 0
max_water_tap_percentage = 100
min_water_tap_percentage = 0
# Creating a new column for each factor with decoded variables:
design <- design %>%
rowwise() %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(min_lemon_juice_tbs, max_lemon_juice_tbs), from = c(-1,1)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(min_sugar_syrup_tbs, max_sugar_syrup_tbs), from = c(-1,1)),
water_tap_percentage = rescale(water_tap, to = c(min_water_tap_percentage, max_water_tap_percentage), from = c(-1,1)))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(janitor)
library(rsm) #Allows us to create the design for our experiments and analyze influence of individual factors and interactions between factors
library(scales)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
library(visreg) #Allows to create contour and 3D plots
design <- bbd(k = 3, # number of factors to be investigated
n0 = 3, # number of center points
randomize = F) # randomizing the design for running the experiments in randomized order
design <- as.tibble(design)  # re-forming the design into a data frame that can be used for calculations
# create the design ourselves??
design
design <- design %>%
rename("lemon_juice" = x1,
"sugar_syrup" = x2,
"water_tap" = x3) %>%
select(std.order, lemon_juice, sugar_syrup, water_tap)
# decoding the variables
# Defining maximum and minimum values of each factor here (we might need them again later)
max_lemon_juice_tbs = 8
min_lemon_juice_tbs = 0
max_sugar_syrup_tbs = 8
min_sugar_syrup_tbs = 0
max_water_tap_percentage = 100
min_water_tap_percentage = 0
# Creating a new column for each factor with decoded variables:
design <- design %>%
rowwise() %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(min_lemon_juice_tbs, max_lemon_juice_tbs), from = c(-1,1)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(min_sugar_syrup_tbs, max_sugar_syrup_tbs), from = c(-1,1)),
water_tap_percentage = rescale(water_tap, to = c(min_water_tap_percentage, max_water_tap_percentage), from = c(-1,1)))
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
#   "taste_score" =          c( 1, 1, 2, 7, 5, 6, 2, 6, 1,  7,  1,  7, 8,  8,  7))
"taste_score" =          c( 7, 1, 1, 1, 2, 8, 2, 7, 6,  1,  7,  6, 7,  8,  5))
#"taste_score" =          c( X, X, X, X, X, X, X, X, X,  X,  X,  X,  X,  X,  X)) # delete "X" and replace with score
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
## read in the file and join the tibble with taste scores
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
# write your code here
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
rownames(coefficients) = rownames(summary_model$coefficients)
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
# Choosing important parameters and re-model
model_yield <- rsm(taste_score ~ FO(lemon_juice, sugar_syrup) + PQ(lemon_juice, sugar_syrup) + TWI(lemon_juice, sugar_syrup), data = design_randomized)
model_yield %>%
summary()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(janitor)
library(rsm) #Allows us to create the design for our experiments and analyze influence of individual factors and interactions between factors
library(scales)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
library(visreg) #Allows to create contour and 3D plots
design <- bbd(k = 3, # number of factors to be investigated
n0 = 1, # number of center points
randomize = FALSE) # randomizing the design for running the experiments in randomized order
design <- as.tibble(design)  # re-forming the design into a data frame that can be used for calculations
# create the design ourselves??
design
design <- design %>%
rename("lemon_juice" = x1,
"sugar_syrup" = x2,
"water_tap" = x3) %>%
select(std.order, lemon_juice, sugar_syrup, water_tap)
# decoding the variables
# Defining maximum and minimum values of each factor here (we might need them again later)
max_lemon_juice_tbs = 8
min_lemon_juice_tbs = 0
max_sugar_syrup_tbs = 8
min_sugar_syrup_tbs = 0
max_water_tap_percentage = 100
min_water_tap_percentage = 0
# Creating a new column for each factor with decoded variables:
design <- design %>%
rowwise() %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(min_lemon_juice_tbs, max_lemon_juice_tbs), from = c(-1,1)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(min_sugar_syrup_tbs, max_sugar_syrup_tbs), from = c(-1,1)),
water_tap_percentage = rescale(water_tap, to = c(min_water_tap_percentage, max_water_tap_percentage), from = c(-1,1)))
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
#   "taste_score" =          c( 1, 1, 2, 7, 5, 6, 2, 6, 1,  7,  1,  7, 8,  8,  7))
"taste_score" =          c( 7, 1, 1, 1, 2, 8, 2, 7, 6,  1,  7,  6, 7,  8,  5))
#"taste_score" =          c( X, X, X, X, X, X, X, X, X,  X,  X,  X,  X,  X,  X)) # delete "X" and replace with score
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
## read in the file and join the tibble with taste scores
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
View(design_randomized)
design_randomized = design_randomized %>%  filter(std.order < 13)
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
## read in the file and join the tibble with taste scores
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
design_randomized = design_randomized %>%  filter(std.order < 14)
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
## read in the file and join the tibble with taste scores
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
## read in the file and join the tibble with taste scores
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
setwd("~/GitHub/kruvelab_functions")
usethis::use_vignette("kruvelab-functions-vignette")
devtools::load_all()
?str
devtools::build_manual()
vignette("rd")
devtools::document()
R CMD Rd2pdf kruvelabFns
getwd()
ReferenceManual(pkg = "Rd2md", outdir = getwd())
??ReferenceManual
install.packages("roxygen2")
??ReferenceManual
??ReferenceManual()
devtools::load_all()
devtools::document()
